# action.yml
name: vsign-action
author: zosocanuck
description: 'Installs vsign and includes it in your path'
branding:
  icon: 'package'
  color: 'blue'
# This is pinned to the last major release, we have to bump it for each action version.
inputs:
  vsign-release:
    description: 'vsign release version to be installed'
    required: false
    default: 'v0.1.0'
  install-dir:
    description: 'Where to install the vsign binary'
    required: false
    default: '$HOME/.vsign'
  use-sudo:
    description: 'set to true if install-dir location requires sudo privs'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    # We verify the version against a SHA **in the published action itself**, not in the GCS bucket.
    - shell: bash
      run: |
        #!/bin/bash
        # vsign install script
        shopt -s expand_aliases
        if [ -z "$NO_COLOR" ]; then
          alias log_info="echo -e \"\033[1;32mINFO\033[0m:\""
          alias log_error="echo -e \"\033[1;31mERROR\033[0m:\""
        else
          alias log_info="echo \"INFO:\""
          alias log_error="echo \"ERROR:\""
        fi
        set -e

        mkdir -p ${{ inputs.install-dir }}

        shaprog() {
          case ${{ runner.os }} in
            Linux)
              sha256sum $1 | cut -d' ' -f1
              ;;
            macOS)
              shasum -a256 $1 | cut -d' ' -f1
              ;;
            Windows)
              powershell -command "(Get-FileHash $1 -Algorithm SHA256 | Select-Object -ExpandProperty Hash).ToLower()"
              ;;
            *)
              log_error "unsupported OS ${{ runner.os }}"
              exit 1
              ;;
          esac
        }

        bootstrap_version='v0.1.0'
        bootstrap_linux_amd64_sha='ee775574d5fbebc23065dbac3c0f05027d1599d9f36ea77191d255d81d79ad8e'
        bootstrap_darwin_amd64_sha='dbfd278f7a1525afa38d18fc2af3153463791dcf0c76fae29fed4bee2b8bfd2b'
        bootstrap_windows_amd64_sha='bd0489797e79bf86b9f6ec6f727b1b75d39b9704472824cde26764cab48049b7'
        vsign_executable_name=vsign

        trap "popd >/dev/null" EXIT

        pushd ${{ inputs.install-dir }} > /dev/null

        case ${{ runner.os }} in
          Linux)
            case ${{ runner.arch }} in
              X64)
                bootstrap_filename='vsign-linux-amd64'
                bootstrap_sha=${bootstrap_linux_amd64_sha}
                desired_vsign_filename='vsign-linux-amd64'
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          macOS)
            case ${{ runner.arch }} in
              X64)
                bootstrap_filename='vsign-darwin-amd64'
                bootstrap_sha=${bootstrap_darwin_amd64_sha}
                desired_vsign_filename='vsign-darwin-amd64'
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          Windows)
            case ${{ runner.arch }} in
              X64)
                bootstrap_filename='vsign-windows-amd64.exe'
                bootstrap_sha=${bootstrap_windows_amd64_sha}
                desired_vsign_filename='vsign-windows-amd64.exe'
                vsign_executable_name=vsign.exe
                ;;
              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;
          *)
            log_error "unsupported architecture $arch"
            exit 1
            ;;
        esac

        SUDO=
        if "${{ inputs.use-sudo }}" == "true" && command -v sudo >/dev/null; then
          SUDO=sudo
        fi

        expected_bootstrap_version_digest=${bootstrap_sha}
        log_info "Downloading bootstrap version '${bootstrap_version}' of vsign to verify version to be installed...\n      https://storage.googleapis.com/vsign-releases/${bootstrap_version}/${bootstrap_filename}"
        $SUDO curl -sL https://storage.googleapis.com/vsign-releases/${bootstrap_version}/${bootstrap_filename} -o ${vsign_executable_name}
        shaBootstrap=$(shaprog ${vsign_executable_name});
        if [[ $shaBootstrap != ${expected_bootstrap_version_digest} ]]; then
          log_error "Unable to validate vsign version: '${{ inputs.vsign-release }}'"
          exit 1
        fi
        $SUDO chmod +x ${vsign_executable_name}

        # If the bootstrap and specified `vsign` releases are the same, we're done.
        if [[ ${{ inputs.vsign-release }} == ${bootstrap_version} ]]; then
          log_info "bootstrap version successfully verified and matches requested version so nothing else to do"
          exit 0
        fi

        semver='^v([0-9]+\.){0,2}(\*|[0-9]+)$'
        if [[ ${{ inputs.vsign-release }} =~ $semver ]]; then
          log_info "Custom vsign version '${{ inputs.vsign-release }}' requested"
        else
          log_error "Unable to validate requested vsign version: '${{ inputs.vsign-release }}'"
          exit 1
        fi
    - if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run:  echo "${{ inputs.install-dir }}" >> $GITHUB_PATH
      shell: bash
    - if: ${{ runner.os == 'Windows' }}
      run:  echo "${{ inputs.install-dir }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh